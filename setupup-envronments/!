1) Introduction:
================
	What is continuouse integration?
So developers, when they are working on a prodect development , will code,
build code,test it and push it to the centralized version control system.

write the code, build & test locally , if everything is good, push it to the CVCS.


MERGE THE CODE , NOT GET INTEGRATED--since the CI  comes. 

Developers-> VCS - > Fetch -> Build -> Test -> Notify -> Developers


2) Installing Tools in Jenkins:
===============================
	In Maven we need to install jdk-8 and in jenkins we need to install jdk-11
Before we start our job we need to make sure jdk-8 and maven in the jenkins.
Manage-jenkins-> GloablTool-Configuration -> ehck jdk and maven path




3) First Job:
=============
(1)Create a job -> New item -> Free style -OK
(ii) Description: Maven Build Project 
(iii) source code GIT: (https://github.com/vsknalli/devopshydclub.git)
(iv) Branches to Build: vp-rem 
(v) add build steps: execute shell (mvn install) or Invoke-toplevel-maven-targets."install"
OK Now we will trigger manually Build 

In order to save artifact in Home page need to some changes 

configure -> post build action -> Archive_the_Artifact (**/*war) save Build it again 
Now you can see the artifact in Home page.



4) Tools in Jenkins:
====================	
	Already we have install two tools in jenkins , git tool and maven tool
There is some difference between plugins and tools 
 tools -> automation software DevOps tool written in the Java programming language.software which we installed in the system
 plugin -> means of enhancing the functionality of a Jenkins environment

example: jdk-8 is a tool and  a Java virtual machine JVM is a plugin like that.

When we talk about tools , we can directly installed the tools in the jenkins server itselfand the other way is "jenkins provide interface to install tools"
ManageJenkins-> Global Tool Configuration --> here we can install in jenkins via interface.

where we can select the tool?
	job -> configure -> Build -> select the maven version which you need for your job.
With the help of Global tool Configuraion we can use many versions we need .



5) Plugins-Versioning & more:
=============================
	In the workspace -> target directory -> we can see the artifact (.war file)
Every time we run the job the artifact will be replaced with new artifact 

Suppose if you want to roll back since have some small issue with the new artifact , we
can not get it from jenkins work space , because its overwritten.

So to preserve all artifacts , we can do versiong through executing some commands 

We need to install some plugins for versioning,Targt directory in jenkins is valatile if someone run # mvn clean all the 
artifact will be get deleted , for that reason we are doing this.
New-item -> Name:Versioning-Builds--Free Style --> we  can copy from Free stype job (Previous Job) -> save -> Run the Job.

For doing versioning--> copy the name "vprofile-v2.war".
Go to versioning job -> configure -> In Build , after build we need to add one more build "Execute Shell"
		" mkdir -p versions"
	 	"cp target/vprofile-v2.war" versions/vprofile-v$BUILD_ID.war
	$BUILD_ID -> we call this variable from jenkins default defined environment varaiables 
Note: search in google "Jenkins environment variable" 
	In the same versioning Job -> configure -> Select "This project is perameterized"
	Select the  option "string perameter"
	Name: VERSION ------> After selecting this perameter option  , while we run the job it will prompts for version number
	Default Value:
	Description: 
In BUILD -> Exsecute Shell Window
                
                " mkdir -p versions"
              #  "cp target/vprofile-v2.war" versions/vprofile-V$BUILD_ID.war
                "cp target/vprofile-v2.war" versions/vprofile-V$version.war      save and Run 
 
Note: its not recomented , in AUtomation since which require human intervesion.

Now the requirement is  i want to versioning the artifact along with Timestamp , bewlo are the setps:
	We need to install some plugin to capture the timestamp 
Manage Jenkins -> Manage Plugins -> Available -> search  "Timestamp"--> select "BUILD_TIMESTAMP" or "ZenTimestamp"
Go to JOB-> Configure -> Unselect "This project is perameterized" and enable "Change Date pattern for the BUIL_TIMESTAMP"
								  give : Date and Time Pattern: yyyy/mm/DD/HHmmss
In BUILD -> Excute shell window	

 " mkdir -p versions"
              #  "cp target/vprofile-v2.war" versions/vprofile-V$BUILD_ID.war
              #  "cp target/vprofile-v2.war" versions/vprofile-V$version.war 
     	          cp target/vprofile-v2.war" versions/vprofile-V$BUILD_TIMESTAMP-$BUILD_ID.war


6) Plugins for CI 
=================
 	We need to install the below plugins in jenkins 
	1) Nexus
	2) SonarQube
	3) Git
	4) 












